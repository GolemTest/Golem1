<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Suivi GPS avec Parcours</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/leaflet.css" />
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            flex-direction: column;
        }

        .header {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            padding: 1rem;
            box-shadow: 0 2px 20px rgba(0,0,0,0.1);
        }

        .header h1 {
            color: white;
            text-align: center;
            font-size: 1.5rem;
            margin-bottom: 1rem;
        }

        .controls {
            display: flex;
            gap: 1rem;
            justify-content: center;
            flex-wrap: wrap;
        }

        .btn {
            background: rgba(255, 255, 255, 0.2);
            border: 2px solid rgba(255, 255, 255, 0.3);
            color: white;
            padding: 0.7rem 1.5rem;
            border-radius: 25px;
            cursor: pointer;
            font-size: 0.9rem;
            font-weight: 600;
            transition: all 0.3s ease;
            backdrop-filter: blur(10px);
        }

        .btn:hover {
            background: rgba(255, 255, 255, 0.3);
            border-color: rgba(255, 255, 255, 0.5);
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.2);
        }

        .btn.active {
            background: rgba(76, 175, 80, 0.8);
            border-color: #4CAF50;
        }

        .btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
            transform: none;
        }

        .status {
            display: flex;
            gap: 1rem;
            justify-content: center;
            flex-wrap: wrap;
            margin-top: 1rem;
            font-size: 0.9rem;
        }

        .status-item {
            background: rgba(255, 255, 255, 0.15);
            padding: 0.5rem 1rem;
            border-radius: 15px;
            color: white;
            backdrop-filter: blur(10px);
        }

        .map-container {
            flex: 1;
            margin: 1rem;
            border-radius: 15px;
            overflow: hidden;
            box-shadow: 0 10px 30px rgba(0,0,0,0.3);
        }

        #map {
            height: 100%;
            min-height: 60vh;
        }

        .route-selector {
            background: rgba(255, 255, 255, 0.1);
            padding: 1rem;
            margin: 0 1rem;
            border-radius: 10px;
            backdrop-filter: blur(10px);
        }

        .route-selector label {
            color: white;
            font-weight: 600;
            margin-right: 1rem;
        }

        .route-selector select {
            background: rgba(255, 255, 255, 0.2);
            color: white;
            border: 1px solid rgba(255, 255, 255, 0.3);
            padding: 0.5rem;
            border-radius: 8px;
            font-size: 1rem;
        }

        .route-selector select option {
            background: #333;
            color: white;
        }

        .pulse {
            animation: pulse 2s infinite;
        }

        @keyframes pulse {
            0% { transform: scale(1); opacity: 1; }
            50% { transform: scale(1.1); opacity: 0.7; }
            100% { transform: scale(1); opacity: 1; }
        }

        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            background: rgba(76, 175, 80, 0.95);
            color: white;
            padding: 1rem 1.5rem;
            border-radius: 10px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.3);
            z-index: 1000;
            transform: translateX(100%);
            transition: transform 0.3s ease;
            backdrop-filter: blur(10px);
        }

        .notification.show {
            transform: translateX(0);
        }

        @media (max-width: 768px) {
            .controls {
                flex-direction: column;
                align-items: center;
            }
            
            .btn {
                width: 80%;
                max-width: 300px;
            }
            
            .status {
                flex-direction: column;
                align-items: center;
            }
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>üó∫Ô∏è Suivi GPS avec Parcours</h1>
        
        <div class="controls">
            <button class="btn" id="startTracking">üöÄ D√©marrer le suivi</button>
            <button class="btn" id="stopTracking">‚èπÔ∏è Arr√™ter le suivi</button>
            <button class="btn" id="centerMap">üéØ Centrer la carte</button>
            <button class="btn" id="toggleVoice">üîä Activer la voix</button>
        </div>

        <div class="status">
            <div class="status-item">
                üìç Position: <span id="coordinates">Non disponible</span>
            </div>
            <div class="status-item">
                üéØ Pr√©cision: <span id="accuracy">-</span>
            </div>
            <div class="status-item">
                üìè Distance parcourue: <span id="distance">0 m</span>
            </div>
            <div class="status-item">
                üé™ Prochain point: <span id="nextPoint">-</span>
            </div>
        </div>
    </div>

    <div class="route-selector">
        <label for="routeSelect">Choisir un parcours:</label>
        <select id="routeSelect">
            <option value="none">Aucun parcours</option>
            <option value="city-center">Centre-ville de Lille</option>
            <option value="park-route">Parcours du Parc</option>
            <option value="historic-route">Circuit Historique</option>
        </select>
    </div>

    <div class="map-container">
        <div id="map"></div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/leaflet.js"></script>
    <script>
        class GPSTracker {
            constructor() {
                this.map = null;
                this.userMarker = null;
                this.watchId = null;
                this.isTracking = false;
                this.voiceEnabled = false;
                this.userPath = [];
                this.totalDistance = 0;
                this.currentRoute = null;
                this.routeLayer = null;
                this.pointMarkers = [];
                this.visitedPoints = new Set();
                this.speechSynthesis = window.speechSynthesis;
                
                // Parcours pr√©d√©finis (coordonn√©es de Lille et environs)
                this.routes = {
                    'city-center': {
                        name: 'Centre-ville de Lille',
                        points: [
                            {
                                lat: 50.6292, lng: 3.0573,
                                name: 'Grand Place',
                                message: 'Vous arrivez sur la magnifique Grand Place de Lille'
                            },
                            {
                                lat: 50.6311, lng: 3.0587,
                                name: 'Op√©ra',
                                message: 'Voici l\'Op√©ra de Lille, un joyau architectural'
                            },
                            {
                                lat: 50.6276, lng: 3.0590,
                                name: 'Cath√©drale',
                                message: 'La Cath√©drale Notre-Dame-de-la-Treille vous accueille'
                            }
                        ],
                        path: [
                            [50.6292, 3.0573],
                            [50.6311, 3.0587],
                            [50.6276, 3.0590],
                            [50.6292, 3.0573]
                        ]
                    },
                    'park-route': {
                        name: 'Parcours du Parc',
                        points: [
                            {
                                lat: 50.6198, lng: 3.0434,
                                name: 'Entr√©e du Parc',
                                message: 'Bienvenue dans le parc, profitez de la nature'
                            },
                            {
                                lat: 50.6220, lng: 3.0456,
                                name: '√âtang',
                                message: 'Vous voici pr√®s de l\'√©tang, un lieu paisible'
                            },
                            {
                                lat: 50.6245, lng: 3.0478,
                                name: 'Aire de jeux',
                                message: 'Aire de jeux √† proximit√©, parfait pour les familles'
                            }
                        ],
                        path: [
                            [50.6198, 3.0434],
                            [50.6220, 3.0456],
                            [50.6245, 3.0478],
                            [50.6198, 3.0434]
                        ]
                    },
                    'historic-route': {
                        name: 'Circuit Historique',
                        points: [
                            {
                                lat: 50.6367, lng: 3.0633,
                                name: 'Citadelle',
                                message: 'La Citadelle de Lille, construite par Vauban'
                            },
                            {
                                lat: 50.6289, lng: 3.0445,
                                name: 'Palais des Beaux-Arts',
                                message: 'Le Palais des Beaux-Arts, l\'un des plus grands mus√©es de France'
                            },
                            {
                                lat: 50.6259, lng: 3.0521,
                                name: 'Hospice Comtesse',
                                message: 'L\'Hospice Comtesse, t√©moin du pass√© m√©di√©val de Lille'
                            }
                        ],
                        path: [
                            [50.6367, 3.0633],
                            [50.6289, 3.0445],
                            [50.6259, 3.0521],
                            [50.6367, 3.0633]
                        ]
                    }
                };
                
                this.init();
            }

            init() {
                this.initMap();
                this.bindEvents();
                this.checkGeolocationSupport();
            }

            initMap() {
                // Coordonn√©es de Lille par d√©faut
                this.map = L.map('map').setView([50.6292, 3.0573], 13);
                
                L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                    attribution: '¬© OpenStreetMap contributors'
                }).addTo(this.map);

                // Style personnalis√© pour le marqueur utilisateur
                this.userIcon = L.divIcon({
                    html: '<div style="background: #4CAF50; width: 20px; height: 20px; border-radius: 50%; border: 3px solid white; box-shadow: 0 2px 6px rgba(0,0,0,0.3);"></div>',
                    className: 'custom-user-marker',
                    iconSize: [20, 20],
                    iconAnchor: [10, 10]
                });
            }

            bindEvents() {
                document.getElementById('startTracking').addEventListener('click', () => this.startTracking());
                document.getElementById('stopTracking').addEventListener('click', () => this.stopTracking());
                document.getElementById('centerMap').addEventListener('click', () => this.centerOnUser());
                document.getElementById('toggleVoice').addEventListener('click', () => this.toggleVoice());
                document.getElementById('routeSelect').addEventListener('change', (e) => this.selectRoute(e.target.value));
            }

            checkGeolocationSupport() {
                if (!navigator.geolocation) {
                    this.showNotification('La g√©olocalisation n\'est pas support√©e par votre navigateur', 'error');
                    return false;
                }
                return true;
            }

            startTracking() {
                if (!this.checkGeolocationSupport()) return;

                const options = {
                    enableHighAccuracy: true,
                    timeout: 10000,
                    maximumAge: 1000
                };

                this.watchId = navigator.geolocation.watchPosition(
                    (position) => this.updatePosition(position),
                    (error) => this.handleGeolocationError(error),
                    options
                );

                this.isTracking = true;
                this.updateUI();
                this.showNotification('Suivi GPS d√©marr√©');
            }

            stopTracking() {
                if (this.watchId) {
                    navigator.geolocation.clearWatch(this.watchId);
                    this.watchId = null;
                }
                
                this.isTracking = false;
                this.updateUI();
                this.showNotification('Suivi GPS arr√™t√©');
            }

            updatePosition(position) {
                const { latitude, longitude, accuracy } = position.coords;
                const newPos = [latitude, longitude];

                // Mettre √† jour le marqueur utilisateur
                if (this.userMarker) {
                    this.userMarker.setLatLng(newPos);
                } else {
                    this.userMarker = L.marker(newPos, { icon: this.userIcon }).addTo(this.map);
                    this.map.setView(newPos, 16);
                }

                // Calculer la distance parcourue
                if (this.userPath.length > 0) {
                    const lastPos = this.userPath[this.userPath.length - 1];
                    const distance = this.calculateDistance(lastPos, newPos);
                    this.totalDistance += distance;
                }

                this.userPath.push(newPos);

                // Dessiner le chemin parcouru
                if (this.userPath.length > 1) {
                    if (this.pathPolyline) {
                        this.map.removeLayer(this.pathPolyline);
                    }
                    this.pathPolyline = L.polyline(this.userPath, {
                        color: '#FF5722',
                        weight: 4,
                        opacity: 0.8
                    }).addTo(this.map);
                }

                // V√©rifier la proximit√© des points d'int√©r√™t
                this.checkProximityToPoints(newPos);

                // Mettre √† jour l'interface
                this.updateStatusDisplay(latitude, longitude, accuracy);
            }

            checkProximityToPoints(userPos) {
                if (!this.currentRoute) return;

                const threshold = 50; // 50 m√®tres

                this.currentRoute.points.forEach((point, index) => {
                    const pointId = `${this.currentRoute.name}_${index}`;
                    
                    if (this.visitedPoints.has(pointId)) return;

                    const distance = this.calculateDistance(userPos, [point.lat, point.lng]);
                    
                    if (distance <= threshold) {
                        this.visitedPoints.add(pointId);
                        this.triggerPointReached(point);
                        
                        // Marquer le point comme visit√© sur la carte
                        const marker = this.pointMarkers.find(m => m.pointIndex === index);
                        if (marker) {
                            marker.marker.setIcon(L.divIcon({
                                html: '<div style="background: #4CAF50; color: white; width: 30px; height: 30px; border-radius: 50%; display: flex; align-items: center; justify-content: center; font-weight: bold; border: 2px solid white; box-shadow: 0 2px 6px rgba(0,0,0,0.3);">‚úì</div>',
                                className: 'visited-point-marker',
                                iconSize: [30, 30],
                                iconAnchor: [15, 15]
                            }));
                        }
                    }
                });

                this.updateNextPointDisplay();
            }

            triggerPointReached(point) {
                this.showNotification(`Point atteint: ${point.name}`, 'success');
                
                if (this.voiceEnabled) {
                    this.speak(point.message);
                }
            }

            speak(text) {
                if (!this.speechSynthesis) return;

                const utterance = new SpeechSynthesisUtterance(text);
                utterance.lang = 'fr-FR';
                utterance.volume = 0.8;
                utterance.rate = 0.9;
                utterance.pitch = 1;

                this.speechSynthesis.speak(utterance);
            }

            selectRoute(routeId) {
                // Nettoyer l'ancienne route
                if (this.routeLayer) {
                    this.map.removeLayer(this.routeLayer);
                }
                
                this.pointMarkers.forEach(marker => {
                    this.map.removeLayer(marker.marker);
                });
                this.pointMarkers = [];
                this.visitedPoints.clear();

                if (routeId === 'none') {
                    this.currentRoute = null;
                    return;
                }

                this.currentRoute = this.routes[routeId];
                
                // Dessiner le parcours
                this.routeLayer = L.layerGroup().addTo(this.map);
                
                // Ligne du parcours
                const routeLine = L.polyline(this.currentRoute.path, {
                    color: '#2196F3',
                    weight: 3,
                    opacity: 0.7,
                    dashArray: '10, 10'
                });
                this.routeLayer.addLayer(routeLine);

                // Points d'int√©r√™t
                this.currentRoute.points.forEach((point, index) => {
                    const marker = L.marker([point.lat, point.lng], {
                        icon: L.divIcon({
                            html: `<div style="background: #2196F3; color: white; width: 25px; height: 25px; border-radius: 50%; display: flex; align-items: center; justify-content: center; font-weight: bold; border: 2px solid white; box-shadow: 0 2px 6px rgba(0,0,0,0.3);">${index + 1}</div>`,
                            className: 'route-point-marker',
                            iconSize: [25, 25],
                            iconAnchor: [12.5, 12.5]
                        })
                    });
                    
                    marker.bindPopup(`<strong>${point.name}</strong><br>${point.message}`);
                    
                    this.routeLayer.addLayer(marker);
                    this.pointMarkers.push({ marker, pointIndex: index });
                });

                // Ajuster la vue pour voir tout le parcours
                this.map.fitBounds(L.polyline(this.currentRoute.path).getBounds().pad(0.1));
                
                this.showNotification(`Parcours "${this.currentRoute.name}" s√©lectionn√©`);
            }

            centerOnUser() {
                if (this.userMarker) {
                    this.map.setView(this.userMarker.getLatLng(), 16);
                } else {
                    this.showNotification('Position utilisateur non disponible', 'warning');
                }
            }

            toggleVoice() {
                this.voiceEnabled = !this.voiceEnabled;
                this.updateUI();
                
                const message = this.voiceEnabled ? 'Messages vocaux activ√©s' : 'Messages vocaux d√©sactiv√©s';
                this.showNotification(message);
                
                if (this.voiceEnabled) {
                    this.speak('Messages vocaux activ√©s');
                }
            }

            calculateDistance(pos1, pos2) {
                const R = 6371e3; // Rayon de la Terre en m√®tres
                const œÜ1 = pos1[0] * Math.PI / 180;
                const œÜ2 = pos2[0] * Math.PI / 180;
                const ŒîœÜ = (pos2[0] - pos1[0]) * Math.PI / 180;
                const ŒîŒª = (pos2[1] - pos1[1]) * Math.PI / 180;

                const a = Math.sin(ŒîœÜ / 2) * Math.sin(ŒîœÜ / 2) +
                        Math.cos(œÜ1) * Math.cos(œÜ2) *
                        Math.sin(ŒîŒª / 2) * Math.sin(ŒîŒª / 2);
                const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));

                return R * c;
            }

            updateStatusDisplay(lat, lng, accuracy) {
                document.getElementById('coordinates').textContent = 
                    `${lat.toFixed(6)}, ${lng.toFixed(6)}`;
                document.getElementById('accuracy').textContent = 
                    `¬±${Math.round(accuracy)}m`;
                document.getElementById('distance').textContent = 
                    this.totalDistance > 1000 ? 
                    `${(this.totalDistance / 1000).toFixed(2)} km` : 
                    `${Math.round(this.totalDistance)} m`;
            }

            updateNextPointDisplay() {
                const nextPointElement = document.getElementById('nextPoint');
                
                if (!this.currentRoute) {
                    nextPointElement.textContent = 'Aucun parcours s√©lectionn√©';
                    return;
                }

                // Trouver le prochain point non visit√©
                for (let i = 0; i < this.currentRoute.points.length; i++) {
                    const pointId = `${this.currentRoute.name}_${i}`;
                    if (!this.visitedPoints.has(pointId)) {
                        nextPointElement.textContent = this.currentRoute.points[i].name;
                        return;
                    }
                }

                nextPointElement.textContent = 'Parcours termin√©!';
            }

            updateUI() {
                const startBtn = document.getElementById('startTracking');
                const stopBtn = document.getElementById('stopTracking');
                const voiceBtn = document.getElementById('toggleVoice');

                startBtn.disabled = this.isTracking;
                stopBtn.disabled = !this.isTracking;

                if (this.isTracking) {
                    startBtn.classList.remove('active');
                    stopBtn.classList.add('active');
                } else {
                    startBtn.classList.remove('active');
                    stopBtn.classList.remove('active');
                }

                if (this.voiceEnabled) {
                    voiceBtn.classList.add('active');
                    voiceBtn.innerHTML = 'üîä Voix activ√©e';
                } else {
                    voiceBtn.classList.remove('active');
                    voiceBtn.innerHTML = 'üîá Voix d√©sactiv√©e';
                }
            }

            handleGeolocationError(error) {
                let message = 'Erreur de g√©olocalisation: ';
                switch (error.code) {
                    case error.PERMISSION_DENIED:
                        message += 'Permission refus√©e';
                        break;
                    case error.POSITION_UNAVAILABLE:
                        message += 'Position indisponible';
                        break;
                    case error.TIMEOUT:
                        message += 'D√©lai d√©pass√©';
                        break;
                    default:
                        message += 'Erreur inconnue';
                }
                this.showNotification(message, 'error');
            }

            showNotification(message, type = 'info') {
                const notification = document.createElement('div');
                notification.className = 'notification';
                notification.textContent = message;

                if (type === 'error') {
                    notification.style.background = 'rgba(244, 67, 54, 0.95)';
                } else if (type === 'warning') {
                    notification.style.background = 'rgba(255, 152, 0, 0.95)';
                } else if (type === 'success') {
                    notification.style.background = 'rgba(76, 175, 80, 0.95)';
                }

                document.body.appendChild(notification);

                // Animation d'entr√©e
                setTimeout(() => notification.classList.add('show'), 100);

                // Suppression automatique
                setTimeout(() => {
                    notification.classList.remove('show');
                    setTimeout(() => document.body.removeChild(notification), 300);
                }, 3000);
            }
        }

        // Initialiser l'application
        document.addEventListener('DOMContentLoaded', () => {
            new GPSTracker();
        });
    </script>
</body>
</html>
